import { app, BrowserWindow, ipcMain, dialog } from "electron";
import * as midiFileParser from "midi-file-parser";
import fs from "fs";
import path from "path";
import { Midi } from "@tonejs/midi";
// import midiFilePath from "./assets/mozart.mid";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit();
}

const generateMidi = () => {
	const midiData = fs.readFileSync("./src/assets/mozart.mid");
	const midi = new Midi(midiData);
	console.log(midi);
	console.log(midi.tracks[0].notes);
	return midi;
	// console.log(Tone);
	// const synth = new Tone.Synth().toDestination();
	// Tone.start();
	// midi.tracks[0].notes.forEach((note) => {
	// 	synth.triggerAttackRelease(
	// 		note.name,
	// 		note.duration,
	// 		note.time,
	// 		note.velocity
	// 	);
	// });
};

async function handleFileOpen() {
	const { canceled, filePaths } = await dialog.showOpenDialog({});
	if (!canceled) {
		return filePaths[0];
	}
}

const createWindow = (): void => {
	// Create the browser window.
	const mainWindow = new BrowserWindow({
		height: 600,
		width: 800,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
			nodeIntegration: true,
		},
	});

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

	// Open the DevTools.
	mainWindow.webContents.openDevTools();
	mainWindow.webContents.send("app_ready");
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
	createWindow();
	ipcMain.handle("dialog:openFile", handleFileOpen);
});

ipcMain.on("dialog:openFile", () => {
	console.log(" XD");
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	if (process.platform !== "darwin") {
		app.quit();
	}
});

app.on("activate", () => {
	// On OS X it's common to re-create a window in the app when the
	// dock icon is clicked and there are no other windows open.
	if (BrowserWindow.getAllWindows().length === 0) {
		createWindow();
	}
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
